# -*- coding: utf-8 -*-
"""Gaussian Mixture Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vMR4OXTfFsTxRxsfoj_Tv64JPX96gbzX
"""

import pandas as pd
import numpy as np
from sklearn.mixture import GaussianMixture
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt

df = pd.read_excel('data.xlsx')

# Define the features
features = [
    'Hydrogen Weight Percent',
    'Temperature',
    'Pressure',
    'HOF',
    'mean Atomic Weight',
    'mean Covalent Radius',
    'mean Electronegativity'
]

# Extract the feature values from the DataFrame
data = df[features].values

# Standardize the features
scaler = StandardScaler()
data = scaler.fit_transform(data)

# Define the GMM model
n_components = 3  # Specify the number of components/clusters
gmm = GaussianMixture(n_components=n_components, covariance_type='full')

# Fit the model to the data
gmm.fit(data)

# Obtain the cluster labels
labels = gmm.predict(data)

# Find the cluster with the highest average Hydrogen weight percent
unique_labels = np.unique(labels)
max_hydrogen_cluster = None
max_hydrogen_avg = -1

for label in unique_labels:
    hydrogen_avg = df.loc[labels == label, 'Hydrogen Weight Percent'].mean()
    if hydrogen_avg > max_hydrogen_avg:
        max_hydrogen_cluster = label
        max_hydrogen_avg = hydrogen_avg

# Assign unique colors to each cluster label
colors = ['red', 'blue', 'green', 'orange', 'purple', 'yellow', 'cyan', 'magenta']
cluster_colors = [colors[label % len(colors)] for label in labels]

# Plot the clusters
plt.scatter(data[:, 0], data[:, 1], c=cluster_colors, cmap='viridis')
plt.xlabel('Hydrogen Weight Percent (Wt %)')
plt.ylabel('Temperature (Â°C)')
plt.title('Gaussian Mixture Model Clustering')

# Create a legend indicating the correspondence between colors and clusters
unique_labels = sorted(unique_labels)
legend_elements = [plt.Line2D([0], [0], marker='o', color='w', label='Cluster {}'.format(label),
                              markerfacecolor=color, markersize=8) for label, color in zip(unique_labels, colors)]
plt.legend(handles=legend_elements)

# Print the cluster labels for each data point
for i, label in enumerate(labels):
    print("Data point {}: Cluster {}".format(i, label))

plt.show()

# Print the cluster with the highest average Hydrogen weight percent
if max_hydrogen_cluster is not None:
    print(f"Cluster with highest average Hydrogen weight percent: {max_hydrogen_cluster}")
else:
    print("No clusters found.")

from sklearn.mixture import GaussianMixture
from sklearn.preprocessing import StandardScaler
from sklearn import metrics
# Performance Metrics
# Silhouette Score
silhouette = metrics.silhouette_score(data, labels)

# Calinski-Harabasz Index
ch_index = metrics.calinski_harabasz_score(data, labels)

# Davies-Bouldin Index
db_index = metrics.davies_bouldin_score(data, labels)

# Print the performance metrics
print("Silhouette Score:", silhouette)
print("Calinski-Harabasz Index:", ch_index)
print("Davies-Bouldin Index:", db_index)

