# -*- coding: utf-8 -*-
"""KMeans_RP2.1_main.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eqdGH0L6M4yxJz8Ch5QT4uzF9wlpQtoE
"""

import pandas as pd
import numpy as np
from sklearn.cluster import KMeans
from sklearn.preprocessing import MinMaxScaler
import matplotlib.pyplot as plt

df = pd.read_excel('data.xlsx')

# Choose features to cluster on and normalize data
features = ['Hydrogen Weight Percent', 'Temperature', 'Pressure', 'HOF','mean Atomic Weight','mean Covalent Radius','mean Electronegativity']
df = df[features]
scaler = MinMaxScaler()
df[features] = scaler.fit_transform(df[features])

# Define number of clusters to form
k = 4

centroids = np.array([
    [1.0, 0.0, 0.0, 0.0, 0.2, 0.0, 0.0],
    [0.8, 0.2, 0.0, 0.0, 0.2, 0.0, 0.0],
    [0.6, 0.4, 0.0, 0.0, 0.2, 0.0, 0.0],
    [0.4, 0.6, 0.0, 0.0, 0.2, 0.0, 0.0],
])
df.head()

kmeans = KMeans(n_clusters=k, init=centroids, n_init=1)
kmeans.fit(df)

# Get cluster labels for each data point
labels = kmeans.labels_

plt.scatter(df['Hydrogen Weight Percent'], df['Pressure'], c=labels)
plt.xlabel('Hydrogen Weight Percent (Wt %)')
plt.ylabel('Pressure Atmospheres Absolute (Bar)')
plt.title('Predicted Clusters Using K Means')
plt.legend()
plt.show()

# Print cluster labels for each data point
for i, label in enumerate(labels):
    print(f'Data point {i+1} belongs to cluster {label+1}')

# Add the cluster labels to the original dataset
df['Cluster'] = labels

import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

dataplot = sns.heatmap(df.corr(), cmap="YlGnBu", annot=True)
plt.show()

sns.set_style("whitegrid")
for cluster in range(4):
    fig, ax1 = plt.subplots()
    ax2 = ax1.twinx()
    cluster_df = df[df['Cluster'] == cluster]
    sns.lineplot(x='Hydrogen Weight Percent', y='Pressure', data=cluster_df,
                 ax=ax1, label='Pressure', color='blue')
    sns.lineplot(x='Hydrogen Weight Percent', y='Temperature', data=cluster_df,
                 ax=ax2, label='Temperature', color='orange', linestyle='--')
    ax1.set_xlabel('Hydrogen Weight Percent')
    ax1.set_ylabel('Pressure')
    ax2.set_ylabel('Temperature')
    ax1.set_title(f'Cluster {cluster}')
    plt.show()

sns.set_style("whitegrid")
for cluster in range(4):
    fig, ax1 = plt.subplots()
    ax2 = ax1.twinx()
    cluster_df = df[df['Cluster'] == cluster]
    sns.scatterplot(x='Hydrogen Weight Percent', y='Pressure', data=cluster_df,
                    ax=ax1, hue='Cluster', palette='Set2', legend=False)
    sns.scatterplot(x='Hydrogen Weight Percent', y='Temperature', data=cluster_df,
                    ax=ax2, hue='Cluster', palette='Set2', legend=False, marker='s')
    ax1.set_xlabel('Hydrogen Weight Percent')
    ax1.set_ylabel('Pressure')
    ax2.set_ylabel('Temperature')
    ax1.set_title(f'Cluster {cluster}')
    plt.show()

sns.set_style("whitegrid")
for cluster in range(4):
    fig, ax1 = plt.subplots()
    ax2 = ax1.twinx()
    cluster_df = df[df['Cluster'] == cluster]
    sns.scatterplot(x='Hydrogen Weight Percent', y='Pressure', data=cluster_df,
                    ax=ax1, hue='Cluster', palette='Set2', legend=False)
    sns.scatterplot(x='Hydrogen Weight Percent', y='Temperature', data=cluster_df,
                    ax=ax2, hue='Cluster', palette='deep', legend=False, marker='s')
    ax1.set_xlabel('Hydrogen Weight Percent')
    ax1.set_ylabel('Pressure')
    ax2.set_ylabel('Temperature')
    ax1.set_title(f'Cluster {cluster+1}')
    plt.show()

for cluster in range(4):
    cluster_df = df[df['Cluster'] == cluster]
    sns.scatterplot(x='Hydrogen Weight Percent', y='Temperature', data=cluster_df,
                    hue='Cluster', palette='Set2', legend=False)
    plt.xlabel('Hydrogen Weight Percent')
    plt.ylabel('Temperature')
    plt.title(f'Temperature vs. Hydrogen Weight Percent (Cluster {cluster})')
    plt.show()

for cluster in range(4):
    cluster_df = df[df['Cluster'] == cluster]
    sns.scatterplot(x='Hydrogen Weight Percent', y='HOF', data=cluster_df,
                    hue='Cluster', palette='Set2', legend=False)
    plt.xlabel('Hydrogen Weight Percent')
    plt.ylabel('HOF')
    plt.title(f'HOF vs. Hydrogen Weight Percent (Cluster {cluster})')
    plt.show()

df1=df.loc[:,['Hydrogen Weight Percent','Temperature','Pressure','Cluster']]

sns.pairplot(df1)

df1=df.loc[:,['Hydrogen Weight Percent','Temperature','Pressure','HOF','Cluster']]
sns.pairplot(df1)

from sklearn import metrics
# Performance Metrics
# Silhouette Score
silhouette = metrics.silhouette_score(df[features], labels)

# Calinski-Harabasz Index
ch_index = metrics.calinski_harabasz_score(df[features], labels)

# Davies-Bouldin Index
db_index = metrics.davies_bouldin_score(df[features], labels)

# Print the performance metrics
print("Silhouette Score:", silhouette)
print("Calinski-Harabasz Index:", ch_index)
print("Davies-Bouldin Index:", db_index)

